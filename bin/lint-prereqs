#!perl

# Note: This script is a CLI interface to Riap function /App/LintPrereqs/lint_prereqs
# and generated automatically using Dist::Zilla::Plugin::Rinci::ScriptFromFunc version 0.05

our $DATE = '2015-01-04'; # DATE
our $VERSION = '0.19'; # VERSION

use 5.010001;
use strict;
use warnings;

use Perinci::CmdLine::Any -prefer_lite=>1;

Perinci::CmdLine::Any->new(
    url => "/App/LintPrereqs/lint_prereqs",
)->run;

# ABSTRACT: Check extraneous/missing prerequisites in dist.ini
# PODNAME: lint-prereqs

__END__

=pod

=encoding UTF-8

=head1 NAME

lint-prereqs - Check extraneous/missing prerequisites in dist.ini

=head1 VERSION

This document describes version 0.19 of lint-prereqs (from Perl distribution App-LintPrereqs), released on 2015-01-04.

=head1 SYNOPSIS

Usage:

 % lint-prereqs [options]

=head1 DESCRIPTION

Check C<[Prereqs / *]> (as well as C<OSPrereqs>, C<Extras/lint-prereqs/Assume-*>)
sections in your C<dist.ini> against what's actually being used in your Perl code
(using C<Perl::PrereqScanner::Lite>) and what's in Perl core list of modules.
Will complain if your prerequisites are not actually used, or already in Perl
core. Will also complain if there are missing prerequisites.

Designed to work with prerequisites that are manually written. Does not work if
you use AutoPrereqs.

Sometimes there are prerequisites that you know are used but can't be detected
by scan_prereqs, or you want to include anyway. If this is the case, you can
instruct lint_prereqs to assume the prerequisite is used.

 ;!lint-prereqs assume-used # even though we know it is not currently used
 Foo::Bar=0
 ;!lint-prereqs assume-used # we are forcing a certain version
 Baz=0.12

Sometimes there are also prerequisites that are detected by scan_prereqs, but
you know are already provided by some other modules. So to make lint-prereqs
ignore them:

 [Extras / lint-prereqs / assume-provided]
 Qux::Quux=0

=head1 OPTIONS

C<*> marks required options.

=over

=item B<--config-path>=I<s>

{en_US Set path to configuration file}.

Can be specified multiple times.

=item B<--config-profile>=I<s>

{en_US Set configuration profile to use}.

=item B<--format>=I<s>

{en_US Choose output format, e.g. json, text}.

=item B<--help>, B<-h>, B<-?>

{en_US Display this help message}.

=item B<--json>

{en_US Set output format to json}.

=item B<--naked-res>

{en_US When outputing as JSON, strip result envelope}.

{en_US 
By default, when outputing as JSON, the full enveloped result is returned, e.g.:

    [200,"OK",[1,2,3],{"func.extra"=>4}]

The reason is so you can get the status (1st element), status message (2nd
element) as well as result metadata/extra result (4th element) instead of just
the result (3rd element). However, sometimes you want just the result, e.g. when
you want to pipe the result for more post-processing. In this case you can use
`--naked-res` so you just get:

    [1,2,3]
}


=item B<--no-config>

{en_US Do not use any configuration file}.

=item B<--perl-version>=I<s>

{en_US Perl version to use (overrides scan_prereqs/dist.ini)}.

=item B<--version>, B<-v>

=back

=head1 FILES

B</etc/lint-prereqs.conf>

B<~/lint-prereqs.conf>

=head1 COMPLETION

This script has shell tab completion capability with support for several shells.

=head2 bash

To activate bash completion for this script, put:

 complete -C lint-prereqs lint-prereqs

in your bash startup (e.g. C<~/.bashrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

It is recommended, however, that you install L<shcompgen> which allows you to activate completion scripts for several kinds of scripts on multiple shells. Some CPAN distributions (those that are built with L<Dist::Zilla::Plugin::GenShellCompletion>) will even automatically enable shell completion for their included scripts (using C<shcompgen>) at installation time, so you can immadiately have tab completion.

=head2 tcsh

To activate tcsh completion for this script, put:

 complete lint-prereqs 'p/*/`lint-prereqs`/'

in your tcsh startup (e.g. C<~/.tcshrc>). Your next shell session will then recognize tab completion for the command. Or, you can also directly execute the line above in your shell to activate immediately.

It is also recommended to install C<shcompgen> (see above).

=head2 other shells

For fish and zsh, install C<shcompgen> as described above.

=head1 HOMEPAGE

Please visit the project's homepage at L<https://metacpan.org/release/App-LintPrereqs>.

=head1 SOURCE

Source repository is at L<https://github.com/sharyanto/perl-App-LintPrereqs>.

=head1 BUGS

Please report any bugs or feature requests on the bugtracker website L<https://rt.cpan.org/Public/Dist/Display.html?Name=App-LintPrereqs>

When submitting a bug or request, please include a test-file or a
patch to an existing test-file that illustrates the bug or desired
feature.

=head1 AUTHOR

perlancar <perlancar@cpan.org>

=head1 COPYRIGHT AND LICENSE

This software is copyright (c) 2015 by perlancar@cpan.org.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.

=cut
